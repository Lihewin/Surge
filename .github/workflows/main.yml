name: Build
on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04-arm

    steps:
      # - name: Tune GitHub-hosted runner network
      #   # https://github.com/actions/runner-images/issues/1187
      #   uses: smorimoto/tune-github-hosted-runner-network@v1
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"
      - name: Download Previous Build
        uses: actions/checkout@v4
        with:
          repository: SukkaLab/ruleset.skk.moe
          persist-credentials: false
          path: previous-build-${{ github.run_id }}-${{ github.run_number }}
          token: ${{ secrets.GIT_TOKEN }}
      - name: Grab Building Folder
        id: ramdisk
        run: |
          echo "build_dir=previous-build-${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
      - name: Setup build folder
        run: |
          if [ ! -d ${{ steps.ramdisk.outputs.build_dir }}/.git ]; then
            echo ".git not found"
            exit 1
          fi
          rm -rf "${{ steps.ramdisk.outputs.build_dir }}/.git"
          if [ ! -d ${{ steps.ramdisk.outputs.build_dir }}/List ]; then
            echo "List not found"
            exit 1
          fi
          echo "public directory is ready: ${{ steps.ramdisk.outputs.build_dir }}"
      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "year=$(date +'%Y')" >> $GITHUB_OUTPUT
          echo "month=$(date +'%m')" >> $GITHUB_OUTPUT
          echo "day=$(date +'%d')" >> $GITHUB_OUTPUT
          echo "hour=$(date +'%H')" >> $GITHUB_OUTPUT
          echo "minute=$(date +'%M')" >> $GITHUB_OUTPUT
          echo "second=$(date +'%S')" >> $GITHUB_OUTPUT
      - name: Restore cache.db
        uses: actions/cache/restore@v4
        id: cache-db-restore
        with:
          path: |
            .cache
          key: ${{ runner.os }}-v3-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:${{ steps.date.outputs.second }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-v3-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:
            ${{ runner.os }}-v3-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:
            ${{ runner.os }}-v3-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }}
            ${{ runner.os }}-v3-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-
            ${{ runner.os }}-v3-${{ steps.date.outputs.year }}-
            ${{ runner.os }}-v3-
      - run: pnpm install
      - run: pnpm run build
        env:
          PUBLIC_DIR: ${{ steps.ramdisk.outputs.build_dir }}
      - name: Pre-deploy check
        # If the public directory doesn't exist, the build should fail.
        # If the public directory is empty, the build should fail.
        run: |
          if [ ! -d ${{ steps.ramdisk.outputs.build_dir }} ]; then
            echo "public directory not found"
            exit 1
          fi
          if [ ! "$(ls -A ${{ steps.ramdisk.outputs.build_dir }})" ]; then
            echo "public directory is empty"
            exit 1
          fi
          if [ ! -f .BUILD_FINISHED ]; then
            echo ".BUILD_FINISHED not found"
            exit 1
          fi
          echo "public directory is ready: ${{ steps.ramdisk.outputs.build_dir }}"
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ github.sha }}-${{ github.run_number }}
          path: ${{ steps.ramdisk.outputs.build_dir }}
          if-no-files-found: error
          retention-days: 1
          compression-level: 4
          include-hidden-files: false
      - name: Cache cache.db
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            .cache
          key: ${{ runner.os }}-v3-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:${{ steps.date.outputs.second }}
  compile_and_release:
    needs:
      - build
    name: Compile JSON to SRS and Upload Release
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ github.sha }}-${{ github.run_number }}
          path: public
      - name: Install sing-box
        run: |
          sudo mkdir -p /etc/apt/keyrings
          sudo curl -fsSL https://sing-box.app/gpg.key -o /etc/apt/keyrings/sagernet.asc
          sudo chmod a+r /etc/apt/keyrings/sagernet.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/sagernet.asc] https://deb.sagernet.org/ * *" | \
            sudo tee /etc/apt/sources.list.d/sagernet.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y sing-box
      - name: Compile JSON to SRS
        run: |
          mkdir -p output
          # Check if sing-box directory exists
          if [ ! -d "public/sing-box" ]; then
            echo "Warning: sing-box directory not found, skipping compilation"
            exit 0
          fi
          
          # Compile all JSON files in sing-box directory
          for rule_type in domainset non_ip ip; do
            if [ -d "public/sing-box/${rule_type}" ]; then
              echo "Processing ${rule_type} rules..."
              find "public/sing-box/${rule_type}" -type f -name "*.json" | while read -r json_file; do
                file_name=$(basename "$json_file" .json)
                output_file="output/${rule_type}_${file_name}.srs"
                echo "Compiling: $json_file -> $output_file"
                sing-box rule-set compile "$json_file" -o "$output_file"
              done
            else
              echo "Directory public/sing-box/${rule_type} not found, skipping..."
            fi
          done
          
          # List compiled files
          echo "Compiled files:"
          ls -la output/ || echo "No files compiled"
      - name: Set timestamp tag
        id: set_tag
        run: |
          TAG=$(date +'%Y%m%d%H%M%S')
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output/*.srs
          tag: ${{ steps.set_tag.outputs.TAG }}
          overwrite: true
          file_glob: true
      - name: Upload binaries to latest release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output/*.srs
          tag: latest
          overwrite: true
          file_glob: true